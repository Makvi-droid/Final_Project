import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 * Student class to represent each student's data
 */
class Student {
    private String studentId;
    private String firstName;
    private String middleName;
    private String lastName;
    private String yearLevel;
    private String status;

    public Student(String studentId, String firstName, String middleName, String lastName, String yearLevel, String status) {
        this.studentId = studentId;
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.yearLevel = yearLevel;
        this.status = status;
    }

    // Getters and setters
    public String getStudentId() { return studentId; }
    public String getFirstName() { return firstName; }
    public String getMiddleName() { return middleName; }
    public String getLastName() { return lastName; }
    public String getYearLevel() { return yearLevel; }
    public String getStatus() { return status; }

    public void setStudentId(String studentId) { this.studentId = studentId; }
    public void setFirstName(String firstName) { this.firstName = firstName; }
    public void setMiddleName(String middleName) { this.middleName = middleName; }
    public void setLastName(String lastName) { this.lastName = lastName; }
    public void setYearLevel(String yearLevel) { this.yearLevel = yearLevel; }
    public void setStatus(String status) { this.status = status; }
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ADMIN
 */

public class Main extends javax.swing.JFrame {
    
    private ArrayList<Student> studentArrayList = new ArrayList<>();
    private int activeDataStructure = 1; 
    private Connection connection;
    
    public Main() {
        initComponents();
        addEventHandlers();
        
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);
        
        // Get database connection
        connection = SQLiteConnection.getConnection();
        
       
        
        // Load students from database
        loadStudentsFromDatabase();
        
        updateTable();  
    }

    

    private void loadStudentsFromDatabase() {
        studentArrayList.clear();
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM student");
            
            while (resultSet.next()) {
                String studentId = resultSet.getString("student_id");
                String firstName = resultSet.getString("student_first_name");
                String middleName = resultSet.getString("student_middle_name");
                String lastName = resultSet.getString("student_last_name");
                String yearLevel = resultSet.getString("year_level");
                String status = resultSet.getString("status");
                
                Student student = new Student(studentId, firstName, middleName, lastName, yearLevel, status);
                studentArrayList.add(student);
            }
            
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading students: " + e.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void addEventHandlers() {
        addBtn.addActionListener(evt -> addBtnActionPerformed(evt));
        deleteBtn.addActionListener(evt -> deleteBtnActionPerformed(evt));
        updateBtn.addActionListener(evt -> updateBtnActionPerformed(evt));
        sortBtn.addActionListener(evt -> sortBtnActionPerformed(evt));
        searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchBarKeyReleased(evt);
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        studentIDtxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        studentFirstNametxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        studentMiddleNametxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        studentLastNametxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        yearLvl = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        yearLvl1 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        searchBar = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        sortBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        studentGradesBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Student ID:");

        jLabel2.setText("Student Middle Name:");

        jLabel3.setText("Student First Name:");

        jLabel4.setText("Student Last Name:");

        jLabel5.setText("Year Level:");

        yearLvl.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1st year", "2nd year", "3rd year", "4th year", " " }));

        jLabel6.setText(" Status:");

        yearLvl1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Regular", "Irregular", " " }));

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setText("Search:");

        addBtn.setText("Add");

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        sortBtn.setText("Sort");

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "student_id", "student_first_name", "student_middle_name", "student_last_name", "year_level", "status"
            }
        ));
        studentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studentTable);

        studentGradesBtn.setText("Student Grades");
        studentGradesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentGradesBtnActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel8.setText("Student Grade System");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(yearLvl1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(studentIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(studentFirstNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(studentMiddleNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(studentLastNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(yearLvl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(164, 164, 164)
                                .addComponent(studentGradesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(sortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(351, 351, 351))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentFirstNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentMiddleNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentLastNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearLvl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(yearLvl1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentGradesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void studentGradesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentGradesBtnActionPerformed
        StudentGrades studentGrades = new StudentGrades();
        studentGrades.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_studentGradesBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {
        String studentId = studentIDtxt.getText();
        String firstName = studentFirstNametxt.getText();
        String middleName = studentMiddleNametxt.getText();
        String lastName = studentLastNametxt.getText();
        String yearLevel = yearLvl.getSelectedItem().toString();
        String status = yearLvl1.getSelectedItem().toString();

        // Data validation
        if (studentId.isEmpty() || firstName.isEmpty() || lastName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Student ID, First Name, and Last Name are required fields.",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if student ID already exists
        for (Student s : studentArrayList) {
            if (s.getStudentId().equals(studentId)) {
                JOptionPane.showMessageDialog(this, "Student ID already exists.",
                        "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        try {
            String sql = "INSERT INTO student (student_id, student_first_name, student_middle_name, student_last_name, year_level, status) VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, studentId);
            preparedStatement.setString(2, firstName);
            preparedStatement.setString(3, middleName);
            preparedStatement.setString(4, lastName);
            preparedStatement.setString(5, yearLevel);
            preparedStatement.setString(6, status);
            
            int rowsAffected = preparedStatement.executeUpdate();
            preparedStatement.close();
            
            if (rowsAffected > 0) {
                Student student = new Student(studentId, firstName, middleName, lastName, yearLevel, status);
                studentArrayList.add(student);
                updateTable();
                
                // Clear input fields
                clearInputFields();
                
                JOptionPane.showMessageDialog(this, "Student added successfully!",
                        "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error adding student: " + e.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void clearInputFields() {
        studentIDtxt.setText("");
        studentFirstNametxt.setText("");
        studentMiddleNametxt.setText("");
        studentLastNametxt.setText("");
        yearLvl.setSelectedIndex(0);
        yearLvl1.setSelectedIndex(0);
    }

   

    
    
    private void updateTable() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Student ID");
        model.addColumn("First Name");
        model.addColumn("Middle Name");
        model.addColumn("Last Name");
        model.addColumn("Year Level");
        model.addColumn("Status");

        for (Student student : studentArrayList) {
            model.addRow(new Object[]{
                student.getStudentId(),
                student.getFirstName(),
                student.getMiddleName(),
                student.getLastName(),
                student.getYearLevel(),
                student.getStatus()
            });
        }
        studentTable.setModel(model); 
    }
    
    private void sortBtnActionPerformed(java.awt.event.ActionEvent evt) {
        sortStudentsByLastName(); 
    }
    
    private void searchBarKeyReleased(java.awt.event.KeyEvent evt) {
        String searchText = searchBar.getText().toLowerCase();
        ArrayList<Student> filteredList = new ArrayList<>();

        for (Student student : studentArrayList) {
            if (student.getFirstName().toLowerCase().contains(searchText) ||
                student.getLastName().toLowerCase().contains(searchText) ||
                student.getStudentId().toLowerCase().contains(searchText)) {
                filteredList.add(student);
            }
        }
        updateTableWithFilteredList(filteredList); 
    }

    private void updateTableWithFilteredList(ArrayList<Student> filteredList) {
    	  DefaultTableModel model = new DefaultTableModel();
          model.addColumn("Student ID");
          model.addColumn("First Name");
          model.addColumn("Middle Name");
          model.addColumn("Last Name");
          model.addColumn("Year Level");
          model.addColumn("Status");

          for (Student student : studentArrayList) {
              model.addRow(new Object[]{
                  student.getStudentId(),
                  student.getFirstName(),
                  student.getMiddleName(),
                  student.getLastName(),
                  student.getYearLevel(),
                  student.getStatus()
              });
          }
          studentTable.setModel(model); 
    }

    private void studentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseClicked
        int selectedRow = studentTable.getSelectedRow();
    
        if (selectedRow != -1) {
            studentIDtxt.setText(studentTable.getValueAt(selectedRow, 0).toString());
            studentFirstNametxt.setText(studentTable.getValueAt(selectedRow, 1).toString());
            studentMiddleNametxt.setText(studentTable.getValueAt(selectedRow, 2).toString());
            studentLastNametxt.setText(studentTable.getValueAt(selectedRow, 3).toString());

            String yearLevelValue = studentTable.getValueAt(selectedRow, 4).toString();
            for (int i = 0; i < yearLvl.getItemCount(); i++) {
                if (yearLvl.getItemAt(i).equals(yearLevelValue)) {
                    yearLvl.setSelectedIndex(i);
                    break;
                }
            }

            String statusValue = studentTable.getValueAt(selectedRow, 5).toString();
            for (int i = 0; i < yearLvl1.getItemCount(); i++) {
                if (yearLvl1.getItemAt(i).equals(statusValue)) {
                    yearLvl1.setSelectedIndex(i);
                    break;
                }
            }
        }
    }//GEN-LAST:event_studentTableMouseClicked

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        String studentId = studentIDtxt.getText();
        
        if (studentId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a student to delete.",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int confirmation = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete this student?",
                "Delete Confirmation",
                JOptionPane.YES_NO_OPTION);

        if (confirmation == JOptionPane.YES_OPTION) {
            try {
                String sql = "DELETE FROM student WHERE student_id = ?";
                PreparedStatement preparedStatement = connection.prepareStatement(sql);
                preparedStatement.setString(1, studentId);
                
                int rowsAffected = preparedStatement.executeUpdate();
                preparedStatement.close();
                
                if (rowsAffected > 0) {
                    deleteStudent(studentId);
                    
                    // Clear input fields
                    clearInputFields();
                    
                    JOptionPane.showMessageDialog(this, "Student deleted successfully!",
                            "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Student not found in database.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error deleting student: " + e.getMessage(),
                        "Database Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
         String studentId = studentIDtxt.getText();
         String firstName = studentFirstNametxt.getText();
         String middleName = studentMiddleNametxt.getText();
         String lastName = studentLastNametxt.getText();
         String yearLevel = yearLvl.getSelectedItem().toString();
         String status = yearLvl1.getSelectedItem().toString();

         // Data validation
         if (studentId.isEmpty() || firstName.isEmpty() || lastName.isEmpty()) {
             JOptionPane.showMessageDialog(this, "Student ID, First Name, and Last Name are required fields.",
                     "Input Error", JOptionPane.ERROR_MESSAGE);
             return;
         }

         int confirmation = JOptionPane.showConfirmDialog(this,
                 "Are you sure you want to update this student?",
                 "Update Confirmation",
                 JOptionPane.YES_NO_OPTION);

         if (confirmation == JOptionPane.YES_OPTION) {
             try {
                 String sql = "UPDATE student SET student_first_name = ?, student_middle_name = ?, student_last_name = ?, year_level = ?, status = ? WHERE student_id = ?";
                 PreparedStatement preparedStatement = connection.prepareStatement(sql);
                 preparedStatement.setString(1, firstName);
                 preparedStatement.setString(2, middleName);
                 preparedStatement.setString(3, lastName);
                 preparedStatement.setString(4, yearLevel);
                 preparedStatement.setString(5, status);
                 preparedStatement.setString(6, studentId);
                 
                 int rowsAffected = preparedStatement.executeUpdate();
                 preparedStatement.close();
                 
                 if (rowsAffected > 0) {
                     // Update the student in the ArrayList
                     for (Student student : studentArrayList) {
                         if (student.getStudentId().equals(studentId)) {
                             student.setFirstName(firstName);
                             student.setMiddleName(middleName);
                             student.setLastName(lastName);
                             student.setYearLevel(yearLevel);
                             student.setStatus(status);
                             break;
                         }
                     }
                     
                     updateTable();
                     
                     // Clear input fields
                     clearInputFields();
                     
                     JOptionPane.showMessageDialog(this, "Student updated successfully!",
                             "Success", JOptionPane.INFORMATION_MESSAGE);
                 } else {
                     JOptionPane.showMessageDialog(this, "Student not found in database.",
                             "Error", JOptionPane.ERROR_MESSAGE);
                 }
             } catch (SQLException e) {
                 JOptionPane.showMessageDialog(this, "Error updating student: " + e.getMessage(),
                         "Database Error", JOptionPane.ERROR_MESSAGE);
                 e.printStackTrace();
             }
         }
    }//GEN-LAST:event_updateBtnActionPerformed
    
    private void addStudent(Student student) {
        studentArrayList.add(student);
        updateTable(); 
    }

    private void deleteStudent(String studentId) {
        studentArrayList.removeIf(student -> student.getStudentId().equals(studentId));
        updateTable(); // Refresh the table after deleting
    }

    private void updateStudent(String studentId, String firstName, String middleName, String lastName, String yearLevel, String status) {
        for (Student student : studentArrayList) {
            if (student.getStudentId().equals(studentId)) {
                student.setFirstName(firstName);
                student.setMiddleName(middleName);
                student.setLastName(lastName);
                student.setYearLevel(yearLevel);
                student.setStatus(status);
                break;
            }
        }
        updateTable(); // Refresh the table after updating
    }
    
    private void sortStudentsByLastName() {
        quickSort(studentArrayList, 0, studentArrayList.size() - 1);
        updateTable(); 
    }
    
    private void quickSort(ArrayList<Student> list, int low, int high) {
        if (low < high) {
            int pi = partition(list, low, high);
            quickSort(list, low, pi - 1);
            quickSort(list, pi + 1, high);
        }
    }

    private int partition(ArrayList<Student> list, int low, int high) {
        String pivot = list.get(high).getLastName(); 
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (list.get(j).getLastName().compareTo(pivot) < 0) {
                i++;
                // Swap
                Student temp = list.get(i);
                list.set(i, list.get(j));
                list.set(j, temp);
            }
        }
        // Swap the pivot element
        Student temp = list.get(i + 1);
        list.set(i + 1, list.get(high));
        list.set(high, temp);
        return i + 1;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            // Set the look and feel to the system look and feel
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        java.awt.EventQueue.invokeLater(() -> new Main().setVisible(true));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton sortBtn;
    private javax.swing.JTextField studentFirstNametxt;
    private javax.swing.JButton studentGradesBtn;
    private javax.swing.JTextField studentIDtxt;
    private javax.swing.JTextField studentLastNametxt;
    private javax.swing.JTextField studentMiddleNametxt;
    private javax.swing.JTable studentTable;
    private javax.swing.JButton updateBtn;
    private javax.swing.JComboBox<String> yearLvl;
    private javax.swing.JComboBox<String> yearLvl1;
    // End of variables declaration//GEN-END:variables
}